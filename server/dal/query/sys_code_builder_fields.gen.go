// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kesilent/react-light-blog/dal/model"
)

func newSysCodeBuilderField(db *gorm.DB, opts ...gen.DOOption) sysCodeBuilderField {
	_sysCodeBuilderField := sysCodeBuilderField{}

	_sysCodeBuilderField.sysCodeBuilderFieldDo.UseDB(db, opts...)
	_sysCodeBuilderField.sysCodeBuilderFieldDo.UseModel(&model.SysCodeBuilderField{})

	tableName := _sysCodeBuilderField.sysCodeBuilderFieldDo.TableName()
	_sysCodeBuilderField.ALL = field.NewAsterisk(tableName)
	_sysCodeBuilderField.ID = field.NewField(tableName, "id")
	_sysCodeBuilderField.FieldName = field.NewString(tableName, "field_name")
	_sysCodeBuilderField.FieldDesc = field.NewString(tableName, "field_desc")
	_sysCodeBuilderField.FieldType = field.NewString(tableName, "field_type")
	_sysCodeBuilderField.FieldJSON = field.NewString(tableName, "field_json")
	_sysCodeBuilderField.Comment = field.NewString(tableName, "comment")
	_sysCodeBuilderField.ColumnName = field.NewString(tableName, "column_name")
	_sysCodeBuilderField.GormTag = field.NewString(tableName, "gorm_tag")
	_sysCodeBuilderField.Require = field.NewBool(tableName, "require")
	_sysCodeBuilderField.ErrorText = field.NewString(tableName, "error_text")
	_sysCodeBuilderField.Clearable = field.NewBool(tableName, "clearable")
	_sysCodeBuilderField.Sort = field.NewBool(tableName, "sort")
	_sysCodeBuilderField.FieldSearchType = field.NewString(tableName, "field_search_type")
	_sysCodeBuilderField.OrderDirection = field.NewString(tableName, "order_direction")
	_sysCodeBuilderField.DictType = field.NewString(tableName, "dict_type")
	_sysCodeBuilderField.CreatedAt = field.NewTime(tableName, "created_at")
	_sysCodeBuilderField.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysCodeBuilderField.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysCodeBuilderField.StructID = field.NewField(tableName, "struct_id")

	_sysCodeBuilderField.fillFieldMap()

	return _sysCodeBuilderField
}

type sysCodeBuilderField struct {
	sysCodeBuilderFieldDo sysCodeBuilderFieldDo

	ALL             field.Asterisk
	ID              field.Field
	FieldName       field.String
	FieldDesc       field.String
	FieldType       field.String
	FieldJSON       field.String
	Comment         field.String
	ColumnName      field.String
	GormTag         field.String // gorm标签
	Require         field.Bool
	ErrorText       field.String
	Clearable       field.Bool
	Sort            field.Bool
	FieldSearchType field.String
	OrderDirection  field.String // 排序方向
	DictType        field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	StructID        field.Field

	fieldMap map[string]field.Expr
}

func (s sysCodeBuilderField) Table(newTableName string) *sysCodeBuilderField {
	s.sysCodeBuilderFieldDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCodeBuilderField) As(alias string) *sysCodeBuilderField {
	s.sysCodeBuilderFieldDo.DO = *(s.sysCodeBuilderFieldDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCodeBuilderField) updateTableName(table string) *sysCodeBuilderField {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.FieldName = field.NewString(table, "field_name")
	s.FieldDesc = field.NewString(table, "field_desc")
	s.FieldType = field.NewString(table, "field_type")
	s.FieldJSON = field.NewString(table, "field_json")
	s.Comment = field.NewString(table, "comment")
	s.ColumnName = field.NewString(table, "column_name")
	s.GormTag = field.NewString(table, "gorm_tag")
	s.Require = field.NewBool(table, "require")
	s.ErrorText = field.NewString(table, "error_text")
	s.Clearable = field.NewBool(table, "clearable")
	s.Sort = field.NewBool(table, "sort")
	s.FieldSearchType = field.NewString(table, "field_search_type")
	s.OrderDirection = field.NewString(table, "order_direction")
	s.DictType = field.NewString(table, "dict_type")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.StructID = field.NewField(table, "struct_id")

	s.fillFieldMap()

	return s
}

func (s *sysCodeBuilderField) WithContext(ctx context.Context) *sysCodeBuilderFieldDo {
	return s.sysCodeBuilderFieldDo.WithContext(ctx)
}

func (s sysCodeBuilderField) TableName() string { return s.sysCodeBuilderFieldDo.TableName() }

func (s sysCodeBuilderField) Alias() string { return s.sysCodeBuilderFieldDo.Alias() }

func (s sysCodeBuilderField) Columns(cols ...field.Expr) gen.Columns {
	return s.sysCodeBuilderFieldDo.Columns(cols...)
}

func (s *sysCodeBuilderField) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCodeBuilderField) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["id"] = s.ID
	s.fieldMap["field_name"] = s.FieldName
	s.fieldMap["field_desc"] = s.FieldDesc
	s.fieldMap["field_type"] = s.FieldType
	s.fieldMap["field_json"] = s.FieldJSON
	s.fieldMap["comment"] = s.Comment
	s.fieldMap["column_name"] = s.ColumnName
	s.fieldMap["gorm_tag"] = s.GormTag
	s.fieldMap["require"] = s.Require
	s.fieldMap["error_text"] = s.ErrorText
	s.fieldMap["clearable"] = s.Clearable
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["field_search_type"] = s.FieldSearchType
	s.fieldMap["order_direction"] = s.OrderDirection
	s.fieldMap["dict_type"] = s.DictType
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["struct_id"] = s.StructID
}

func (s sysCodeBuilderField) clone(db *gorm.DB) sysCodeBuilderField {
	s.sysCodeBuilderFieldDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCodeBuilderField) replaceDB(db *gorm.DB) sysCodeBuilderField {
	s.sysCodeBuilderFieldDo.ReplaceDB(db)
	return s
}

type sysCodeBuilderFieldDo struct{ gen.DO }

func (s sysCodeBuilderFieldDo) Debug() *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCodeBuilderFieldDo) WithContext(ctx context.Context) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCodeBuilderFieldDo) ReadDB() *sysCodeBuilderFieldDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCodeBuilderFieldDo) WriteDB() *sysCodeBuilderFieldDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCodeBuilderFieldDo) Session(config *gorm.Session) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCodeBuilderFieldDo) Clauses(conds ...clause.Expression) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCodeBuilderFieldDo) Returning(value interface{}, columns ...string) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCodeBuilderFieldDo) Not(conds ...gen.Condition) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCodeBuilderFieldDo) Or(conds ...gen.Condition) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCodeBuilderFieldDo) Select(conds ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCodeBuilderFieldDo) Where(conds ...gen.Condition) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCodeBuilderFieldDo) Order(conds ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCodeBuilderFieldDo) Distinct(cols ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCodeBuilderFieldDo) Omit(cols ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCodeBuilderFieldDo) Join(table schema.Tabler, on ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCodeBuilderFieldDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCodeBuilderFieldDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCodeBuilderFieldDo) Group(cols ...field.Expr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCodeBuilderFieldDo) Having(conds ...gen.Condition) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCodeBuilderFieldDo) Limit(limit int) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCodeBuilderFieldDo) Offset(offset int) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCodeBuilderFieldDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCodeBuilderFieldDo) Unscoped() *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCodeBuilderFieldDo) Create(values ...*model.SysCodeBuilderField) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCodeBuilderFieldDo) CreateInBatches(values []*model.SysCodeBuilderField, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCodeBuilderFieldDo) Save(values ...*model.SysCodeBuilderField) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCodeBuilderFieldDo) First() (*model.SysCodeBuilderField, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderField), nil
	}
}

func (s sysCodeBuilderFieldDo) Take() (*model.SysCodeBuilderField, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderField), nil
	}
}

func (s sysCodeBuilderFieldDo) Last() (*model.SysCodeBuilderField, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderField), nil
	}
}

func (s sysCodeBuilderFieldDo) Find() ([]*model.SysCodeBuilderField, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCodeBuilderField), err
}

func (s sysCodeBuilderFieldDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCodeBuilderField, err error) {
	buf := make([]*model.SysCodeBuilderField, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCodeBuilderFieldDo) FindInBatches(result *[]*model.SysCodeBuilderField, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCodeBuilderFieldDo) Attrs(attrs ...field.AssignExpr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCodeBuilderFieldDo) Assign(attrs ...field.AssignExpr) *sysCodeBuilderFieldDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCodeBuilderFieldDo) Joins(fields ...field.RelationField) *sysCodeBuilderFieldDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCodeBuilderFieldDo) Preload(fields ...field.RelationField) *sysCodeBuilderFieldDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCodeBuilderFieldDo) FirstOrInit() (*model.SysCodeBuilderField, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderField), nil
	}
}

func (s sysCodeBuilderFieldDo) FirstOrCreate() (*model.SysCodeBuilderField, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderField), nil
	}
}

func (s sysCodeBuilderFieldDo) FindByPage(offset int, limit int) (result []*model.SysCodeBuilderField, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCodeBuilderFieldDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCodeBuilderFieldDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCodeBuilderFieldDo) Delete(models ...*model.SysCodeBuilderField) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCodeBuilderFieldDo) withDO(do gen.Dao) *sysCodeBuilderFieldDo {
	s.DO = *do.(*gen.DO)
	return s
}
