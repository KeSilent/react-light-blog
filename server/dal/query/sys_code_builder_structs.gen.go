// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kesilent/react-light-blog/dal/model"
)

func newSysCodeBuilderStruct(db *gorm.DB, opts ...gen.DOOption) sysCodeBuilderStruct {
	_sysCodeBuilderStruct := sysCodeBuilderStruct{}

	_sysCodeBuilderStruct.sysCodeBuilderStructDo.UseDB(db, opts...)
	_sysCodeBuilderStruct.sysCodeBuilderStructDo.UseModel(&model.SysCodeBuilderStruct{})

	tableName := _sysCodeBuilderStruct.sysCodeBuilderStructDo.TableName()
	_sysCodeBuilderStruct.ALL = field.NewAsterisk(tableName)
	_sysCodeBuilderStruct.ID = field.NewField(tableName, "id")
	_sysCodeBuilderStruct.TblName = field.NewString(tableName, "tbl_name")
	_sysCodeBuilderStruct.Package = field.NewString(tableName, "package")
	_sysCodeBuilderStruct.StructName = field.NewString(tableName, "struct_name")
	_sysCodeBuilderStruct.ShortName = field.NewString(tableName, "short_name")
	_sysCodeBuilderStruct.Description = field.NewString(tableName, "description")
	_sysCodeBuilderStruct.AutoCreateAPIToSql = field.NewBool(tableName, "auto_create_api_to_sql")
	_sysCodeBuilderStruct.AutoCreateResource = field.NewBool(tableName, "auto_create_resource")
	_sysCodeBuilderStruct.AutoMoveFile = field.NewBool(tableName, "auto_move_file")
	_sysCodeBuilderStruct.Version = field.NewField(tableName, "version")
	_sysCodeBuilderStruct.CreatedAt = field.NewTime(tableName, "created_at")
	_sysCodeBuilderStruct.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysCodeBuilderStruct.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysCodeBuilderStruct.fillFieldMap()

	return _sysCodeBuilderStruct
}

type sysCodeBuilderStruct struct {
	sysCodeBuilderStructDo sysCodeBuilderStructDo

	ALL                field.Asterisk
	ID                 field.Field
	TblName            field.String
	Package            field.String
	StructName         field.String
	ShortName          field.String
	Description        field.String
	AutoCreateAPIToSql field.Bool
	AutoCreateResource field.Bool
	AutoMoveFile       field.Bool
	Version            field.Field
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field

	fieldMap map[string]field.Expr
}

func (s sysCodeBuilderStruct) Table(newTableName string) *sysCodeBuilderStruct {
	s.sysCodeBuilderStructDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCodeBuilderStruct) As(alias string) *sysCodeBuilderStruct {
	s.sysCodeBuilderStructDo.DO = *(s.sysCodeBuilderStructDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCodeBuilderStruct) updateTableName(table string) *sysCodeBuilderStruct {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.TblName = field.NewString(table, "tbl_name")
	s.Package = field.NewString(table, "package")
	s.StructName = field.NewString(table, "struct_name")
	s.ShortName = field.NewString(table, "short_name")
	s.Description = field.NewString(table, "description")
	s.AutoCreateAPIToSql = field.NewBool(table, "auto_create_api_to_sql")
	s.AutoCreateResource = field.NewBool(table, "auto_create_resource")
	s.AutoMoveFile = field.NewBool(table, "auto_move_file")
	s.Version = field.NewField(table, "version")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysCodeBuilderStruct) WithContext(ctx context.Context) *sysCodeBuilderStructDo {
	return s.sysCodeBuilderStructDo.WithContext(ctx)
}

func (s sysCodeBuilderStruct) TableName() string { return s.sysCodeBuilderStructDo.TableName() }

func (s sysCodeBuilderStruct) Alias() string { return s.sysCodeBuilderStructDo.Alias() }

func (s sysCodeBuilderStruct) Columns(cols ...field.Expr) gen.Columns {
	return s.sysCodeBuilderStructDo.Columns(cols...)
}

func (s *sysCodeBuilderStruct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCodeBuilderStruct) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["tbl_name"] = s.TblName
	s.fieldMap["package"] = s.Package
	s.fieldMap["struct_name"] = s.StructName
	s.fieldMap["short_name"] = s.ShortName
	s.fieldMap["description"] = s.Description
	s.fieldMap["auto_create_api_to_sql"] = s.AutoCreateAPIToSql
	s.fieldMap["auto_create_resource"] = s.AutoCreateResource
	s.fieldMap["auto_move_file"] = s.AutoMoveFile
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysCodeBuilderStruct) clone(db *gorm.DB) sysCodeBuilderStruct {
	s.sysCodeBuilderStructDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCodeBuilderStruct) replaceDB(db *gorm.DB) sysCodeBuilderStruct {
	s.sysCodeBuilderStructDo.ReplaceDB(db)
	return s
}

type sysCodeBuilderStructDo struct{ gen.DO }

func (s sysCodeBuilderStructDo) Debug() *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCodeBuilderStructDo) WithContext(ctx context.Context) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCodeBuilderStructDo) ReadDB() *sysCodeBuilderStructDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCodeBuilderStructDo) WriteDB() *sysCodeBuilderStructDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCodeBuilderStructDo) Session(config *gorm.Session) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCodeBuilderStructDo) Clauses(conds ...clause.Expression) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCodeBuilderStructDo) Returning(value interface{}, columns ...string) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCodeBuilderStructDo) Not(conds ...gen.Condition) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCodeBuilderStructDo) Or(conds ...gen.Condition) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCodeBuilderStructDo) Select(conds ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCodeBuilderStructDo) Where(conds ...gen.Condition) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCodeBuilderStructDo) Order(conds ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCodeBuilderStructDo) Distinct(cols ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCodeBuilderStructDo) Omit(cols ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCodeBuilderStructDo) Join(table schema.Tabler, on ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCodeBuilderStructDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCodeBuilderStructDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCodeBuilderStructDo) Group(cols ...field.Expr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCodeBuilderStructDo) Having(conds ...gen.Condition) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCodeBuilderStructDo) Limit(limit int) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCodeBuilderStructDo) Offset(offset int) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCodeBuilderStructDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCodeBuilderStructDo) Unscoped() *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCodeBuilderStructDo) Create(values ...*model.SysCodeBuilderStruct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCodeBuilderStructDo) CreateInBatches(values []*model.SysCodeBuilderStruct, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCodeBuilderStructDo) Save(values ...*model.SysCodeBuilderStruct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCodeBuilderStructDo) First() (*model.SysCodeBuilderStruct, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderStruct), nil
	}
}

func (s sysCodeBuilderStructDo) Take() (*model.SysCodeBuilderStruct, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderStruct), nil
	}
}

func (s sysCodeBuilderStructDo) Last() (*model.SysCodeBuilderStruct, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderStruct), nil
	}
}

func (s sysCodeBuilderStructDo) Find() ([]*model.SysCodeBuilderStruct, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysCodeBuilderStruct), err
}

func (s sysCodeBuilderStructDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysCodeBuilderStruct, err error) {
	buf := make([]*model.SysCodeBuilderStruct, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCodeBuilderStructDo) FindInBatches(result *[]*model.SysCodeBuilderStruct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCodeBuilderStructDo) Attrs(attrs ...field.AssignExpr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCodeBuilderStructDo) Assign(attrs ...field.AssignExpr) *sysCodeBuilderStructDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCodeBuilderStructDo) Joins(fields ...field.RelationField) *sysCodeBuilderStructDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCodeBuilderStructDo) Preload(fields ...field.RelationField) *sysCodeBuilderStructDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCodeBuilderStructDo) FirstOrInit() (*model.SysCodeBuilderStruct, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderStruct), nil
	}
}

func (s sysCodeBuilderStructDo) FirstOrCreate() (*model.SysCodeBuilderStruct, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysCodeBuilderStruct), nil
	}
}

func (s sysCodeBuilderStructDo) FindByPage(offset int, limit int) (result []*model.SysCodeBuilderStruct, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCodeBuilderStructDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCodeBuilderStructDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCodeBuilderStructDo) Delete(models ...*model.SysCodeBuilderStruct) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCodeBuilderStructDo) withDO(do gen.Dao) *sysCodeBuilderStructDo {
	s.DO = *do.(*gen.DO)
	return s
}
