// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	JwtBlacklist        *jwtBlacklist
	SysBaseMenu         *sysBaseMenu
	SysDept             *sysDept
	SysDictionary       *sysDictionary
	SysDictionaryDetail *sysDictionaryDetail
	SysOperationRecord  *sysOperationRecord
	SysRole             *sysRole
	SysRoleMenu         *sysRoleMenu
	SysUser             *sysUser
	SysUserRole         *sysUserRole
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	JwtBlacklist = &Q.JwtBlacklist
	SysBaseMenu = &Q.SysBaseMenu
	SysDept = &Q.SysDept
	SysDictionary = &Q.SysDictionary
	SysDictionaryDetail = &Q.SysDictionaryDetail
	SysOperationRecord = &Q.SysOperationRecord
	SysRole = &Q.SysRole
	SysRoleMenu = &Q.SysRoleMenu
	SysUser = &Q.SysUser
	SysUserRole = &Q.SysUserRole
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		JwtBlacklist:        newJwtBlacklist(db, opts...),
		SysBaseMenu:         newSysBaseMenu(db, opts...),
		SysDept:             newSysDept(db, opts...),
		SysDictionary:       newSysDictionary(db, opts...),
		SysDictionaryDetail: newSysDictionaryDetail(db, opts...),
		SysOperationRecord:  newSysOperationRecord(db, opts...),
		SysRole:             newSysRole(db, opts...),
		SysRoleMenu:         newSysRoleMenu(db, opts...),
		SysUser:             newSysUser(db, opts...),
		SysUserRole:         newSysUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	JwtBlacklist        jwtBlacklist
	SysBaseMenu         sysBaseMenu
	SysDept             sysDept
	SysDictionary       sysDictionary
	SysDictionaryDetail sysDictionaryDetail
	SysOperationRecord  sysOperationRecord
	SysRole             sysRole
	SysRoleMenu         sysRoleMenu
	SysUser             sysUser
	SysUserRole         sysUserRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		JwtBlacklist:        q.JwtBlacklist.clone(db),
		SysBaseMenu:         q.SysBaseMenu.clone(db),
		SysDept:             q.SysDept.clone(db),
		SysDictionary:       q.SysDictionary.clone(db),
		SysDictionaryDetail: q.SysDictionaryDetail.clone(db),
		SysOperationRecord:  q.SysOperationRecord.clone(db),
		SysRole:             q.SysRole.clone(db),
		SysRoleMenu:         q.SysRoleMenu.clone(db),
		SysUser:             q.SysUser.clone(db),
		SysUserRole:         q.SysUserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		JwtBlacklist:        q.JwtBlacklist.replaceDB(db),
		SysBaseMenu:         q.SysBaseMenu.replaceDB(db),
		SysDept:             q.SysDept.replaceDB(db),
		SysDictionary:       q.SysDictionary.replaceDB(db),
		SysDictionaryDetail: q.SysDictionaryDetail.replaceDB(db),
		SysOperationRecord:  q.SysOperationRecord.replaceDB(db),
		SysRole:             q.SysRole.replaceDB(db),
		SysRoleMenu:         q.SysRoleMenu.replaceDB(db),
		SysUser:             q.SysUser.replaceDB(db),
		SysUserRole:         q.SysUserRole.replaceDB(db),
	}
}

type queryCtx struct {
	JwtBlacklist        *jwtBlacklistDo
	SysBaseMenu         *sysBaseMenuDo
	SysDept             *sysDeptDo
	SysDictionary       *sysDictionaryDo
	SysDictionaryDetail *sysDictionaryDetailDo
	SysOperationRecord  *sysOperationRecordDo
	SysRole             *sysRoleDo
	SysRoleMenu         *sysRoleMenuDo
	SysUser             *sysUserDo
	SysUserRole         *sysUserRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		JwtBlacklist:        q.JwtBlacklist.WithContext(ctx),
		SysBaseMenu:         q.SysBaseMenu.WithContext(ctx),
		SysDept:             q.SysDept.WithContext(ctx),
		SysDictionary:       q.SysDictionary.WithContext(ctx),
		SysDictionaryDetail: q.SysDictionaryDetail.WithContext(ctx),
		SysOperationRecord:  q.SysOperationRecord.WithContext(ctx),
		SysRole:             q.SysRole.WithContext(ctx),
		SysRoleMenu:         q.SysRoleMenu.WithContext(ctx),
		SysUser:             q.SysUser.WithContext(ctx),
		SysUserRole:         q.SysUserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
